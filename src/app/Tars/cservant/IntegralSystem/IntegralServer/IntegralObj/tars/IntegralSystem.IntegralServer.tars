module integraltafserviceservant
{
    struct resultMsg {
        0   require     int     code=200;   //返回码
        1   optional    string  error;      //返回信息
    };

    struct InUpdateUserAccount {
        0   require     string  uuid;           //用户ID
        1   require     float   points;         //积分数量
        2   require     int     type;           //1.增加;2.扣除;
        3   require     int     mark;           //1，充值；2：购物获得；3：抢红包获得；4：完成传播任务；5：分销获得；6：商家群大厅收取；7，核销定金券赠送；8，红包过期返还；9，传播过期返还；-1，提现；-2：购买赠送；-3：发红包；-4：发布传播任务；-5：分销佣金；-6：用户入群扣除；-7，核销定金券赠送；-8，pos机收款手续费；0：注册赠送；
        4   require     int     env_domain_id;
    };

    struct InUpdateShopAccount {
        0   require     string  shop_id;        //店铺ID
        1   require     float   points;         //积分数量
        2   require     int     type;           //1.增加;2.扣除;
        3   require     int     mark;           //1，充值；2：购物获得；3：抢红包获得；4：完成传播任务；5：分销获得；6：商家群大厅收取；7，核销定金券赠送；8，红包过期返还；9，传播过期返还；-1，提现；-2：购买赠送；-3：发红包；-4：发布传播任务；-5：分销佣金；-6：用户入群扣除；-7，核销定金券赠送；-8，pos机收款手续费；0：注册赠送；
        4   require     int     env_domain_id;
    };

    struct InReleasePropagation {
        0   require     string      shop_id;        //店铺id
        1   require     float       points;         //传播任务积分
        2   require     string      end_time;       //结束时间
        3   require     int         env_domain_id;  //平台id
    };


    struct InReceiveIntegral {
        0   require     string  uuid;               //用户ID；
        1   require     float   points;             //领取积分数量;
        2   require     string  withholding_code;   //传播任务码；
    };

    struct InNotify {
        0   require     string  code;   //单号
        1   require     string  paid;   //是否支付
    };

    struct InTransaction {
        0   require     string      uuid;
        1   require     int         shop_id;
        2   require     float       points;
        3   require     string      type_mark;  //propagation传播,dist分销,gift购物,
    };

    struct InGiveUserBuy {
        0   require     string      uuid;
        1   require     int         shop_id;
        2   require     int         points;
    };

    struct inputById {
        0   optional    string      uuid;
        1   optional    int         shop_id;
        3   optional    int         domainId;
    };

    struct inputintegra{
        0   optional    int         type;
        1   optional    string      start;
        3   optional    string      end;
        4   optional    int         page;
    };

    struct myPoints {
        0   require     string      points;         //店铺积分
        1   require     string      notPoints;      //不可用积分
        2   require     string      loadPoints;     //待结算积分
    };

    struct pointsList {
        0   require     int         id;             //id
        1   require     string      shop_id;        //店铺ID
        2   require     int         mark;           //1、充值 2、提现；3、购买赠送；4、发布传播任务；5、分销佣金；6、商家群大厅收取；7、核销定金券赠送；8、传播过期返还；9,总后台赠送积分
        3   require     string      why;            //赠送原因
        4   require     int         type;           //1，收入；2，支出
        5   require     string      code;           //业务单号
        7   require     string      points;         //积分数量
        6   require     int         change_type;    //变更方式：1,充值；2，提现；3，赠送
        8   require     string      created_at;     //创建时间
    };

    struct pointsLists{
        0   require     int                 page;           //店铺积分
        1   require     string              total;          //不可用积分
        3   require     vector<pointsList>  data;          //不可用积分

    };

    struct InWriteOffGive {
        0   require     string      uuid;
        1   require     int         shop_id;
        2   require     int         points;
        3   require     string      order_code;
    };

    struct InReleaseShopBuy {
        0   require     string      shop_id;        //店铺ID
        1   require     float       points;         //积分数量
        2   require     int         type;           //1.增加;2.扣除;
        3   require     int         mark;           //1，充值；2：购物获得；3：抢红包获得；4：完成传播任务；5：分销获得；6：商家群大厅收取；7，核销定金券赠送；8，红包过期返还；9，传播过期返还；-1，提现；-2：购买赠送；-3：发红包；-4：发布传播任务；-5：分销佣金；-6：用户入群扣除；-7，核销定金券赠送；-8，pos机收款手续费；0：注册赠送；
        4   require     int         env_domain_id;
        5   optional    string      order_code;     //订单号
    };

    interface IntegralTafService {
        //测试
        void testSever(string in, out resultMsg OurParams);

        //创建用户积分账户
        void notifyUserRegister(string uuid, out resultMsg OurParams);

        //更新用户账户积分信息
        void updateAccountInfo(InUpdateUserAccount params, out resultMsg OurParams);

        //用户购买赠送积分
        void giveUserPointsBuy(InGiveUserBuy InParams, out resultMsg OutParams);

        //用户支付店铺预扣积分
        void releaseShopPointsBuy(InReleaseShopBuy InParams, out resultMsg OutParams);

        //用户领取积分
        void receiveIntegral(InReceiveIntegral params, out resultMsg OutParams);



        //创建店铺积分账户
        void notifyShopRegister(string shop_id,int domainId, out resultMsg OurParams );

        //更新店铺账户积分信息
        //void updateShopInfo(InUpdateShopAccount params, out resultMsg OutParams);

        //后台给店铺商家发放积分
        void giveIntegral(int store_id,int points,string make,out resultMsg OutParams);



        //核销赠送积分
        void writeOffGivePoints(InWriteOffGive InParams, out resultMsg OutParams);

        //积分交易
        void integralTransaction(InTransaction params, out resultMsg OurParams);

        //账户剩余积分
        void integralBalance(inputById byId,out myPoints points, out resultMsg OutParams);

        //积分流水记录
        void integralLists(inputById byId,inputintegra input,out resultMsg OutParams,out pointsLists poinList);

        //发布传播积分预扣
        void releasePropagation(InReleasePropagation params, out string code, out resultMsg OutParams);



        //积分充值回调
        void notifyRecharge(InNotify params, out resultMsg OutParams);

        //积分提现回调
        void notifyDraw(InNotify params, out resultMsg OutParams);





    };
};