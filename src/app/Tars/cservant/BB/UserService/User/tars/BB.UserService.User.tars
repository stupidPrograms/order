module UserService
{

    //时间查询结构体
    struct TimeQueryParam
    {
        0 optional string startTime;
        1 optional string endTime;
    };


    //简版的快速用户查询,适用于批量查询
    struct UserBasic
    {
        0 optional string uuid; //uuid
        1 optional string account; //帐户名
        2 optional string mobile; //手机号
        3 optional string createdAt; //创建时间
        4 optional int envDomainId=1; //域名ID
    };

    //用户帐户，带密码(一般情况下不需要使用)
    struct UserAccount
    {
        0 require string uuid; //uuid
        1 require string account; //帐户名
        3 require string mobile; //手机号
        4 require string createdAt; //创建时间
        5 require int envDomainId=1; //域名ID
        7 require string password;//密码
    };


    //用户帐户，通过uuid和域名id可以确定唯一的用户信息，适用于单个查询（比basic多了昵称和头像）
    struct UserInfo
    {
        0 require string uuid; //uuid
        1 require string account; //帐户名
        2 require string nickname; //昵称
        3 require string mobile; //手机号
        4 require string createdAt; //创建时间
        5 require int envDomainId=1; //域名ID
        6 require string headimgurl; //用户头像
        7 require int sex;//用户性别
        8 require string signature;//个人签名
    };

    //微信用户模型
    struct WechatUser
    {
        0 require string id; //自增ID，排序用
        1 require string openid;//微信用户的唯一标识
        2 require string uuid;//uuid
        3 require string nickname; //微信昵称
        4 require int sex; //微信用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
        5 require int envDomainId=1; //域名ID
        6 require string headimgurl; //用户头像
    };



    //多个用户查询
    struct UsersQueryParam
    {
        0 optional vector<string> uuid;//uuid精确筛选
        1 optional string account;
        2 optional string nickname;
        3 optional string mobile;
        4 optional TimeQueryParam createdAt;
        5 require int envDomainId=1; //域名id筛选
        //6 optional Pagination pagination; // 分页参数
    };

    //获取单个用户（模糊查询）
    struct UserQueryParam
    {
        1 optional string account;
        2 optional string nickname;
        3 optional string mobile;
        4 optional TimeQueryParam createdAt;
        5 optional int envDomainId=1; //域名筛选
    };

    struct PathInfo
    {
        0 require string uuid;
        1 require string envDomainId="1";
        2 require string path; //访问路径
        3 require string method; //GET,POST,DELETE,PUT
    }; //json_encode关联数组

    struct Pagination
    {
        0 require int page; //页数入参
        1 require int perPage; //每页数量入参
        2 optional int count; //总条数
    };

    struct UserData
    {
        0 require string mobile;//
        1 require int    user_type; //用户类型 1 用户 2 商户
    };
     //主要接口
      interface User
      {

          //使用token取得一个用户的基本信息，需要登录的一般请求本接口就可以
          //pathinfo是控制访问权限的，后续有黑名单的话，不予返回用户信息。把需要保护的接口信息使用PathInfo结构json_encode一下
          //user里包含了uuid、env_domain_id等信息
          //返回值为状态码，如401是未授权需要登录（token过期等）,非0值都代表异常
          int getUserBasicByToken(string token, string pathinfo, out UserBasic user, out string error);

          //这里用token获得用户更详细
          int getUserInfoByToken(string token, string pathinfo, out UserInfo user, out string error);

           //取得一个用户的基本信息
           int getUserBasicByUuid(string uuid, int envDomainId, out UserBasic user, out string error);

         //取得用户基本信息列表
          int getUserBasicListByQuery(UsersQueryParam queryParam, out vector<UserBasic> list, out string error);

          //取得一个用户详情
          int getUserInfoByUuid(string uuid, int envDomainId, out UserInfo user, out string error);

          //取得用户详情列表
          int getUserInfoListByQuery(UsersQueryParam queryParam, out vector<UserInfo> list, out string error);

          //取得一个用户帐户(含密码)
          int getUserAccountByUuid(string uuid, int envDomainId, out UserAccount user, out string error);

          //手机号是否注册过
          int mobileExists(string mobile, int envDomainId, out bool exists, out string error);

          //使用uuid取得微信用户信息（包含openid）
          int getWechatUserByUuid(string uuid, string domain, out WechatUser wechatUser, out string error);

          //通过uuid更新用户的手机号
          int updateUserUuid(string uuid,string mobile,out string error);

          //创建用户
          int generateUser(UserData user_data,out UserInfo user,out string error_msg);
          //通过手机号获取用户信息
          int getUserInfoByMobile(string mobile,out UserInfo user);

      };

    //这个模块实际上也属于UserServant
    interface Profile
    {
        int bindNewMobile(string uuid, int envDomainId, string newMobile, string md5Password, out string error);
        int bindNewAccount(string uuid, int envDomainId, string newAccount, out string error);
        int resetPassword(string uuid, int envDomainId, string md5Password, out string error);
        int resetPasswordByMobile(string mobile, int envDomainId, string md5Password, out string error);
        int passwordMatchMobile(string md5Password, string mobile, int envDomainId, out bool match, out string error);
        int updateProfile(UserInfo ui, out string message);
    };

};